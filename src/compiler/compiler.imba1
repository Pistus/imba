# imba$inlineHelpers=1
# imba$v2=0

# var imba = require '../imba'
var T = require './token'
var util = require './helpers'
var lexer = require './lexer'
var rewriter = require './rewriter'
export var parser = require('../../build/parser')['parser']
var ast = require './nodes'

import resolveConfigFile from './imbaconfig'
import ImbaParseError from './errors'

import {Diagnostic,Compilation} from './compilation'

# Instantiate a Lexer for our use here.
export var lex = lexer.Lexer.new
export var Rewriter = rewriter.Rewriter
export var helpers = util
var rewriter = Rewriter.new

parser:lexer = lex.jisonBridge
parser:yy = ast # everything is exported right here now

Compilation:prototype:lexer = lex
Compilation:prototype:rewriter = rewriter
Compilation:prototype:parser = parser

# normalize compiler options, resolve imbaconfig.json++
export def resolveConfig o = {}
	let path = o:sourcePath
	o:config ||= resolveConfigFile(path,o) or {}
	return o

export def tokenize code, options = {}
	o.@source = code
	lex.reset
	var tokens = lex.tokenize(code, options)

	unless o:rewrite === no
		tokens = rewriter.rewrite(tokens,options)
	return tokens

export def rewrite tokens, o = {}
	rewriter.rewrite tokens, o

export def parse code, o = {}
	o = resolveConfig(o)
	var tokens = code isa Array ? code : tokenize(code,o)
	try
		o.@source ||= code if tokens != code
		o.@tokens = tokens
		return parser.parse(tokens)
	catch err
		err:_code = code
		err:_sourcePath = o:sourcePath if o:sourcePath
		throw err

export def compile code, o = {}
	let compilation = Compilation.new(code,o)
	return compilation.compile()

	try
		# check if code is completely blank
		unless /\S/.test(code)
			return {
				js: "",
				toString: do this:js
			}
		var tokens = tokenize(code, o)
		var ast = parse(tokens, o)
		return ast.compile(o)
	catch err
		err:_code = code
		err:_sourcePath = o:sourcePath if o:sourcePath

		if err:toNativeError
			throw err.toNativeError

		throw err

export def analyze code, o = {}
	var meta
	try
		var ast = parse(code,o)
		meta = ast.analyze(o)
	catch e
		unless e isa ImbaParseError
			if e:lexer
				e = ImbaParseError.new(e, tokens: e:lexer:tokens, pos: e:lexer:pos)
			else
				throw e
		meta = {warnings: [e]}
	return meta
